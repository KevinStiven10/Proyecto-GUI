/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista

public class VistaRequerimientos {

    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1() {

        try {
            // Su código
            ArrayList<Requerimiento_1Vo> requerimiento1 = controlador.consultarRequerimiento1();

            // Cada VO cargado, mostrarlo en la vista
            for (Requerimiento_1Vo proyecto : requerimiento1) {
                System.out.printf("%s %d %n",

                    proyecto.getCiudad_recidencia(), proyecto.getAvgSalario());
            }
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento2() {

        try {
            // Su código
            ArrayList<Requerimiento_2Vo> requerimiento2 = controlador.consultarRequerimiento2();

            // Cada VO cargado, mostrarlo en la vista
            for (Requerimiento_2Vo proyecto : requerimiento2) {
                System.out.printf("%d %s %n",

                    proyecto.getID_Proyecto(), proyecto.getProveedor());
            }
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento3() {

        try {
            // Su código
            ArrayList<Requerimiento_3Vo> requerimiento3 = controlador.consultarRequerimiento3();

            // Cada VO cargado, mostrarlo en la vista
            for (Requerimiento_3Vo proyecto : requerimiento3) {
                System.out.printf("%d %s %n",

                    proyecto.getID_Proyecto(), proyecto.getNombre_Material());
            }
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }
}

// Controlador

public class ControladorRequerimientos {
    // Su código

    private final Requerimiento_1Dao requerimiento_1Dao;
    private final Requerimiento_2Dao requerimiento_2Dao;
    private final Requerimiento_3Dao requerimiento_3Dao;

    public ControladorRequerimientos() {
        this.requerimiento_1Dao = new Requerimiento_1Dao();
        this.requerimiento_2Dao = new Requerimiento_2Dao();
        this.requerimiento_3Dao = new Requerimiento_3Dao();
    }

    public ArrayList<Requerimiento_1Vo> consultarRequerimiento1() throws SQLException {
        // Su código
        return this.requerimiento_1Dao.requerimiento1();
    }

    public ArrayList<Requerimiento_2Vo> consultarRequerimiento2() throws SQLException {
        // Su código
        return this.requerimiento_2Dao.requerimiento2();
    }

    public ArrayList<Requerimiento_3Vo> consultarRequerimiento3() throws SQLException {
        // Su código
        return this.requerimiento_3Dao.requerimiento3();
    }
}

// Modelo
// VO

public class Requerimiento_1Vo {
    // Su código
    private String ciudad_recidencia;
    private int avgSalario;

    public Requerimiento_1Vo() {
    }
    public Requerimiento_1Vo(String ciudad_recidencia, int avgSalario) {
        this.ciudad_recidencia = ciudad_recidencia;
        this.avgSalario = avgSalario;
    }
    public String getCiudad_recidencia() {
        return ciudad_recidencia;
    }
    public void setCiudad_recidencia(String ciudad_recidencia) {
        this.ciudad_recidencia = ciudad_recidencia;
    }
    public int getAvgSalario() {
        return avgSalario;
    }
    public void setAvgSalario(int avgSalario) {
        this.avgSalario = avgSalario;
    }
}


public class Requerimiento_2Vo {
    // Su código
    private int ID_Proyecto;
    private String proveedor;

    public Requerimiento_2Vo() {
    }
    public Requerimiento_2Vo(int iD_Proyecto, String proveedor) {
        ID_Proyecto = iD_Proyecto;
        this.proveedor = proveedor;
    }
    public int getID_Proyecto() {
        return ID_Proyecto;
    }
    public void setID_Proyecto(int iD_Proyecto) {
        ID_Proyecto = iD_Proyecto;
    }
    public String getProveedor() {
        return proveedor;
    }
    public void setProveedor(String proveedor) {
        this.proveedor = proveedor;
    } 
}


public class Requerimiento_3Vo {
    // Su código
    private int ID_Proyecto;
    private String nombre_Material;
    
    public Requerimiento_3Vo() {
    }
    public Requerimiento_3Vo(int iD_Proyecto, String nombre_Material) {
        ID_Proyecto = iD_Proyecto;
        this.nombre_Material = nombre_Material;
    }
    public int getID_Proyecto() {
        return ID_Proyecto;
    }
    public void setID_Proyecto(int iD_Proyecto) {
        ID_Proyecto = iD_Proyecto;
    }
    public String getNombre_Material() {
        return nombre_Material;
    }
    public void setNombre_Material(String nombre_Material) {
        this.nombre_Material = nombre_Material;
    }
}

// DAO

public class Requerimiento_1Dao {
    public ArrayList<Requerimiento_1Vo> requerimiento1() throws SQLException {
        // Su código
        ArrayList<Requerimiento_1Vo> respuesta = new ArrayList<Requerimiento_1Vo>();
        Connection conexion = JDBCUtilities.getConnection();

        try {
            String consulta = "SELECT Ciudad_Residencia, AVG(Salario) AS 'Promedio' FROM Lider l GROUP BY Ciudad_Residencia HAVING AVG(Salario) < 600000 ORDER BY AVG(Salario) DESC;";
            
            Statement statement = conexion.createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);

            while(resultSet.next()) {
                Requerimiento_1Vo requerimiento1 = new Requerimiento_1Vo();
                requerimiento1.setCiudad_recidencia(resultSet.getString("Ciudad_Residencia"));
                requerimiento1.setAvgSalario(resultSet.getInt("Promedio"));
                respuesta.add(requerimiento1);
            }
            resultSet.close();
            statement.close();

        } catch (SQLException e) {
            System.err.println("Error: "+e);

        } finally {
            if (conexion!=null) {
                conexion.close();
            }
        }
        // Retornar la coleccion vo's
        return respuesta;
    }
}


public class Requerimiento_2Dao {
    public ArrayList<Requerimiento_2Vo> requerimiento2() throws SQLException {
        // Su código
        ArrayList<Requerimiento_2Vo> respuesta = new ArrayList<Requerimiento_2Vo>();
        Connection conexion = JDBCUtilities.getConnection();

        try {
            String consulta = "SELECT p.ID_Proyecto, c.Proveedor FROM Proyecto p JOIN Compra c ON (p.ID_Proyecto = c.ID_Proyecto) WHERE p.Ciudad = 'Quibdo' ORDER BY p.ID_Proyecto ASC;";
            
            Statement statement = conexion.createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);

            while(resultSet.next()) {
                Requerimiento_2Vo requerimiento2 = new Requerimiento_2Vo();
                requerimiento2.setID_Proyecto(resultSet.getInt("ID_Proyecto"));
                requerimiento2.setProveedor(resultSet.getString("Proveedor"));
                respuesta.add(requerimiento2);
            }
            resultSet.close();
            statement.close();

        } catch (SQLException e) {
            System.err.println("Error: "+e);

        } finally {
            if (conexion!=null) {
                conexion.close();
            }
        }
        // Retornar la coleccion vo's
        return respuesta;
    }
}


public class Requerimiento_3Dao {
    public ArrayList<Requerimiento_3Vo> requerimiento3() throws SQLException {
        // Su código
        ArrayList<Requerimiento_3Vo> respuesta = new ArrayList<Requerimiento_3Vo>();
        Connection conexion = JDBCUtilities.getConnection();

        try {
            String consulta = "SELECT p.ID_Proyecto, mc.Nombre_Material FROM Proyecto p JOIN Compra c ON (p.ID_Proyecto = c.ID_Proyecto) JOIN MaterialConstruccion mc ON (mc.ID_MaterialConstruccion = c.ID_MaterialConstruccion) WHERE p.ID_Proyecto BETWEEN 5 and 15 ORDER BY p.ID_Proyecto ASC;";
            
            Statement statement = conexion.createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);

            while(resultSet.next()) {
                Requerimiento_3Vo requerimiento3 = new Requerimiento_3Vo();
                requerimiento3.setID_Proyecto(resultSet.getInt("ID_Proyecto"));
                requerimiento3.setNombre_Material(resultSet.getString("Nombre_Material"));
                respuesta.add(requerimiento3);
            }
            resultSet.close();
            statement.close();

        } catch (SQLException e) {
            System.err.println("Error: "+e);

        } finally {
            if (conexion!=null) {
                conexion.close();
            }
        }
        // Retornar la coleccion vo's
        return respuesta;
    }
}